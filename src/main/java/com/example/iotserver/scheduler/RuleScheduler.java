package com.example.iotserver.scheduler;

import com.example.iotserver.service.RuleEngineService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

@Component
@Slf4j
@RequiredArgsConstructor
public class RuleScheduler {

    private final RuleEngineService ruleEngineService;

    /**
     * Ch·∫°y Rule Engine m·ªói 30 gi√¢y
     * 
     * fixedDelay = 30000 nghƒ©a l√† sau khi ho√†n th√†nh, ƒë·ª£i 30 gi√¢y r·ªìi ch·∫°y l·∫°i
     */
    @Scheduled(fixedDelay = 30000, initialDelay = 10000)
    public void executeRules() {
        log.debug("üîÑ B·∫Øt ƒë·∫ßu ki·ªÉm tra quy t·∫Øc t·ª± ƒë·ªông...");

        try {
            ruleEngineService.executeAllRules();
        } catch (Exception e) {
            log.error("L·ªói khi ch·∫°y Rule Engine: {}", e.getMessage(), e);
        }
    }

    /**
     * D·ªçn d·∫πp log c≈© m·ªói ng√†y l√∫c 2:00 s√°ng
     */
    @Scheduled(cron = "0 0 2 * * ?")
    public void cleanupOldLogs() {
        log.info("üßπ B·∫Øt ƒë·∫ßu d·ªçn d·∫πp log c≈©...");

        // TODO: Tri·ªÉn khai logic x√≥a log c≈© h∆°n 30 ng√†y

        log.info("‚úÖ Ho√†n th√†nh d·ªçn d·∫πp log");
    }
}