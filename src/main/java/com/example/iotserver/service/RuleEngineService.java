package com.example.iotserver.service;

import com.example.iotserver.dto.SensorDataDTO;
import com.example.iotserver.dto.WeatherDTO;
import com.example.iotserver.entity.Rule;
import com.example.iotserver.entity.RuleCondition;
import com.example.iotserver.entity.RuleExecutionLog;
import com.example.iotserver.repository.RuleExecutionLogRepository;
import com.example.iotserver.repository.RuleRepository;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.*;
import java.util.stream.Collectors;

import com.example.iotserver.service.EmailService; // <<<< 1. TH√äM IMPORT

@Service
@Slf4j
@RequiredArgsConstructor
public class RuleEngineService {

    private final RuleRepository ruleRepository;
    private final RuleExecutionLogRepository logRepository;
    private final SensorDataService sensorDataService;
    private final DeviceService deviceService;
    private final WebSocketService webSocketService;
    private final ObjectMapper objectMapper;
    private final WeatherService weatherService;
    private final EmailService emailService;

    /**
     * Ch·∫°y t·∫•t c·∫£ quy t·∫Øc ƒëang k√≠ch ho·∫°t
     */
    @Transactional
    public void executeAllRules() {
        long startTime = System.currentTimeMillis();

        List<Rule> enabledRules = ruleRepository.findAllEnabledRules();
        log.debug("ƒêang ki·ªÉm tra {} quy t·∫Øc ƒëang k√≠ch ho·∫°t", enabledRules.size());

        int successCount = 0;
        int skippedCount = 0;
        int failedCount = 0;

        for (Rule rule : enabledRules) {
            try {
                boolean executed = executeRule(rule);
                if (executed) {
                    successCount++;
                } else {
                    skippedCount++;
                }
            } catch (Exception e) {
                failedCount++;
                log.error("L·ªói khi th·ª±c thi quy t·∫Øc {}: {}", rule.getName(), e.getMessage());
            }
        }

        long executionTime = System.currentTimeMillis() - startTime;
        log.info("Ho√†n th√†nh ki·ªÉm tra quy t·∫Øc: {} th√†nh c√¥ng, {} b·ªè qua, {} l·ªói ({}ms)",
                successCount, skippedCount, failedCount, executionTime);
    }

    /**
     * Th·ª±c thi m·ªôt quy t·∫Øc c·ª• th·ªÉ
     */
    @Transactional
    public boolean executeRule(Rule rule) {
        long startTime = System.currentTimeMillis();

        log.debug("ƒêang ki·ªÉm tra quy t·∫Øc: {}", rule.getName());

        try {
            // B∆∞·ªõc 1: Ki·ªÉm tra ƒëi·ªÅu ki·ªán
            Map<String, Object> conditionContext = new HashMap<>();
            boolean allConditionsMet = evaluateConditions(rule, conditionContext);

            long executionTime = System.currentTimeMillis() - startTime;

            // B∆∞·ªõc 2: N·∫øu ƒëi·ªÅu ki·ªán ƒë√∫ng ‚Üí Th·ª±c hi·ªán h√†nh ƒë·ªông
            if (allConditionsMet) {
                log.info("‚úÖ Quy t·∫Øc '{}' - ƒêi·ªÅu ki·ªán ƒê√É TH·ªéA M√ÉN", rule.getName());

                List<String> performedActions = performActions(rule);

                // C·∫≠p nh·∫≠t th·ªëng k√™
                rule.setLastExecutedAt(LocalDateTime.now());
                rule.setExecutionCount(rule.getExecutionCount() + 1);
                ruleRepository.save(rule);

                // L∆∞u log th√†nh c√¥ng
                saveExecutionLog(rule, RuleExecutionLog.ExecutionStatus.SUCCESS,
                        true, conditionContext, performedActions, null, executionTime);

                return true;
            } else {
                log.debug("‚è≠Ô∏è Quy t·∫Øc '{}' - ƒêi·ªÅu ki·ªán CH∆ØA TH·ªéA M√ÉN", rule.getName());

                // L∆∞u log b·ªè qua
                saveExecutionLog(rule, RuleExecutionLog.ExecutionStatus.SKIPPED,
                        false, conditionContext, Collections.emptyList(), null, executionTime);

                return false;
            }

        } catch (Exception e) {
            long executionTime = System.currentTimeMillis() - startTime;
            log.error("‚ùå L·ªói khi th·ª±c thi quy t·∫Øc '{}': {}", rule.getName(), e.getMessage(), e);

            // L∆∞u log l·ªói
            saveExecutionLog(rule, RuleExecutionLog.ExecutionStatus.FAILED,
                    null, null, null, e.getMessage(), executionTime);

            return false;
        }
    }

    /**
     * Ki·ªÉm tra t·∫•t c·∫£ ƒëi·ªÅu ki·ªán c·ªßa quy t·∫Øc
     */
    private boolean evaluateConditions(Rule rule, Map<String, Object> context) {
        if (rule.getConditions().isEmpty()) {
            log.warn("Quy t·∫Øc '{}' kh√¥ng c√≥ ƒëi·ªÅu ki·ªán n√†o", rule.getName());
            return false;
        }

        // S·∫Øp x·∫øp theo th·ª© t·ª±
        List<RuleCondition> sortedConditions = rule.getConditions().stream()
                .sorted(Comparator.comparing(RuleCondition::getOrderIndex))
                .collect(Collectors.toList());

        boolean result = true;
        RuleCondition.LogicalOperator nextOperator = RuleCondition.LogicalOperator.AND;

        for (int i = 0; i < sortedConditions.size(); i++) {
            RuleCondition condition = sortedConditions.get(i);
            boolean conditionMet = evaluateSingleCondition(condition, context);

            // K·∫øt h·ª£p v·ªõi ƒëi·ªÅu ki·ªán tr∆∞·ªõc ƒë√≥
            if (i == 0) {
                result = conditionMet;
            } else {
                if (nextOperator == RuleCondition.LogicalOperator.AND) {
                    result = result && conditionMet;
                } else {
                    result = result || conditionMet;
                }
            }

            // L∆∞u operator cho l·∫ßn ti·∫øp theo
            nextOperator = condition.getLogicalOperator();

            log.debug("  ƒêi·ªÅu ki·ªán {}: {} {} {} = {}",
                    i + 1, condition.getField(), condition.getOperator(),
                    condition.getValue(), conditionMet);
        }

        return result;
    }

    /**
     * Ki·ªÉm tra m·ªôt ƒëi·ªÅu ki·ªán ƒë∆°n
     */
    private boolean evaluateSingleCondition(RuleCondition condition, Map<String, Object> context) {
        switch (condition.getType()) {
            case SENSOR_VALUE:
                return evaluateSensorCondition(condition, context);
            case TIME_RANGE:
                return evaluateTimeCondition(condition, context);
            case DEVICE_STATUS:
                return evaluateDeviceStatusCondition(condition, context);
            case WEATHER: // ‚úÖ TH√äM M·ªöI
                return evaluateWeatherCondition(condition, context);
            default:
                log.warn("Lo·∫°i ƒëi·ªÅu ki·ªán kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: {}", condition.getType());
                return false;
        }
    }

    /**
     * Ki·ªÉm tra ƒëi·ªÅu ki·ªán v·ªÅ gi√° tr·ªã c·∫£m bi·∫øn
     */
    private boolean evaluateSensorCondition(RuleCondition condition, Map<String, Object> context) {
        try {
            String deviceId = condition.getDeviceId();

            log.info("üîç [Rule Check] deviceId: {}, field: {}, operator: {}, value: {}",
                    deviceId, condition.getField(), condition.getOperator(), condition.getValue());

            if (deviceId == null || deviceId.isEmpty()) {
                log.warn("‚ùå [Rule Check] Thi·∫øu deviceId cho ƒëi·ªÅu ki·ªán c·∫£m bi·∫øn");
                return false;
            }

            // ‚úÖ TH√äM: Ki·ªÉm tra d·ªØ li·ªáu c√≥ t·ªìn t·∫°i kh√¥ng
            if (!sensorDataService.hasRecentData(deviceId, 24)) {
                log.warn("‚ùå [Rule Check] Kh√¥ng c√≥ d·ªØ li·ªáu 24h g·∫ßn nh·∫•t cho device: {}", deviceId);
                return false;
            }

            SensorDataDTO sensorData = sensorDataService.getLatestSensorData(deviceId);

            log.info("üîç [Rule Check] Sensor data t·ª´ InfluxDB: {}", sensorData != null ? "C√ì D·ªÆ LI·ªÜU" : "NULL");

            if (sensorData == null) {
                log.warn("‚ùå [Rule Check] Kh√¥ng c√≥ d·ªØ li·ªáu c·∫£m bi·∫øn cho thi·∫øt b·ªã: {}", deviceId);
                return false;
            }

            Double actualValue = getSensorValue(sensorData, condition.getField());

            log.info("üîç [Rule Check] actualValue: {}, expectedValue: {}", actualValue, condition.getValue());

            if (actualValue == null) {
                log.warn("‚ùå [Rule Check] Kh√¥ng t√¨m th·∫•y gi√° tr·ªã cho tr∆∞·ªùng: {}", condition.getField());
                return false;
            }

            Double expectedValue = Double.parseDouble(condition.getValue());
            context.put(condition.getField(), actualValue);
            context.put(condition.getField() + "_expected", expectedValue);

            boolean result = compareValues(actualValue, condition.getOperator(), expectedValue);

            log.info("üîç [Rule Check] So s√°nh: {} {} {} = {}",
                    actualValue, condition.getOperator(), expectedValue, result);

            return result;

        } catch (Exception e) {
            log.error("‚ùå [Rule Check] L·ªói: {}", e.getMessage(), e);
            return false;
        }
    }

    /**
     * Ki·ªÉm tra ƒëi·ªÅu ki·ªán v·ªÅ th·ªùi gian
     */
    private boolean evaluateTimeCondition(RuleCondition condition, Map<String, Object> context) {
        try {
            LocalTime now = LocalTime.now();
            context.put("current_time", now.toString());

            // Format: "06:00-18:00" ho·∫∑c "06:00"
            String value = condition.getValue();

            if (value.contains("-")) {
                // Kho·∫£ng th·ªùi gian
                String[] parts = value.split("-");
                LocalTime start = LocalTime.parse(parts[0].trim());
                LocalTime end = LocalTime.parse(parts[1].trim());

                boolean inRange = now.isAfter(start) && now.isBefore(end);
                context.put("time_range", value);
                context.put("in_time_range", inRange);

                return inRange;
            } else {
                // Th·ªùi gian c·ª• th·ªÉ
                LocalTime target = LocalTime.parse(value.trim());
                return now.isAfter(target) || now.equals(target);
            }

        } catch (Exception e) {
            log.error("L·ªói khi ki·ªÉm tra ƒëi·ªÅu ki·ªán th·ªùi gian: {}", e.getMessage());
            return false;
        }
    }

    /**
     * Ki·ªÉm tra ƒëi·ªÅu ki·ªán v·ªÅ tr·∫°ng th√°i thi·∫øt b·ªã
     */
    private boolean evaluateDeviceStatusCondition(RuleCondition condition, Map<String, Object> context) {
        try {
            String deviceId = condition.getDeviceId();
            if (deviceId == null || deviceId.isEmpty()) {
                return false;
            }

            var device = deviceService.getDeviceWithLatestData(deviceId);
            String status = device.getStatus();

            context.put("device_" + deviceId + "_status", status);

            return status.equalsIgnoreCase(condition.getValue());

        } catch (Exception e) {
            log.error("L·ªói khi ki·ªÉm tra tr·∫°ng th√°i thi·∫øt b·ªã: {}", e.getMessage());
            return false;
        }
    }

    /**
     * So s√°nh gi√° tr·ªã
     */
    private boolean compareValues(Double actual, RuleCondition.Operator operator, Double expected) {
        switch (operator) {
            case EQUALS:
                return Math.abs(actual - expected) < 0.01;
            case NOT_EQUALS:
                return Math.abs(actual - expected) >= 0.01;
            case GREATER_THAN:
                return actual > expected;
            case GREATER_THAN_OR_EQUAL:
                return actual >= expected;
            case LESS_THAN:
                return actual < expected;
            case LESS_THAN_OR_EQUAL:
                return actual <= expected;
            default:
                return false;
        }
    }

    /**
     * L·∫•y gi√° tr·ªã c·∫£m bi·∫øn theo t√™n tr∆∞·ªùng
     */
    private Double getSensorValue(SensorDataDTO data, String field) {
        if (field == null || data == null)
            return null;

        String normalizedField = field.toLowerCase().replace("_", "");

        // ‚úÖ So s√°nh v·ªõi c√°c chu·ªói ƒë√£ chu·∫©n h√≥a
        switch (normalizedField) {
            case "temperature":
                return data.getTemperature();
            case "humidity":
                return data.getHumidity();
            case "soilmoisture":
                return data.getSoilMoisture();
            case "lightintensity":
                return data.getLightIntensity();
            case "soilph":
                return data.getSoilPH();
            default:
                log.warn("Tr∆∞·ªùng c·∫£m bi·∫øn kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ ho·∫∑c kh√¥ng c√≥ gi√° tr·ªã: {}", field);
                return null;
        }
    }

    /**
     * Th·ª±c hi·ªán c√°c h√†nh ƒë·ªông
     */
    private List<String> performActions(Rule rule) {
        List<String> performedActions = new ArrayList<>();

        for (Rule.RuleAction action : rule.getActions()) {
            try {
                String result = performSingleAction(rule, action);
                performedActions.add(result);
                log.info("  ‚úì ƒê√£ th·ª±c hi·ªán: {}", result);
            } catch (Exception e) {
                String error = "L·ªói khi th·ª±c hi·ªán h√†nh ƒë·ªông: " + e.getMessage();
                performedActions.add(error);
                log.error("  ‚úó {}", error);
            }
        }

        return performedActions;
    }

    /**
     * Th·ª±c hi·ªán m·ªôt h√†nh ƒë·ªông ƒë∆°n
     */
    private String performSingleAction(Rule rule, Rule.RuleAction action) {
        switch (action.getType()) {
            case TURN_ON_DEVICE:
                return turnOnDevice(action);
            case TURN_OFF_DEVICE:
                return turnOffDevice(action);
            case SEND_NOTIFICATION:
                return sendNotification(rule, action);
            case SEND_EMAIL: // <<<< 3. TH√äM CASE M·ªöI
                return sendEmailForRule(rule, action);
            default:
                return "Lo·∫°i h√†nh ƒë·ªông kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: " + action.getType();
        }
    }

    /**
     * B·∫≠t thi·∫øt b·ªã
     */
    private String turnOnDevice(Rule.RuleAction action) {
        Map<String, Object> command = new HashMap<>();
        command.put("action", "turn_on");
        if (action.getDurationSeconds() != null) {
            command.put("duration", action.getDurationSeconds());
        }

        deviceService.controlDevice(action.getDeviceId(), "turn_on", command);

        return String.format("ƒê√£ b·∫≠t thi·∫øt b·ªã %s trong %d gi√¢y",
                action.getDeviceId(),
                action.getDurationSeconds() != null ? action.getDurationSeconds() : 0);
    }

    /**
     * T·∫Øt thi·∫øt b·ªã
     */
    private String turnOffDevice(Rule.RuleAction action) {
        Map<String, Object> command = new HashMap<>();
        command.put("action", "turn_off");

        deviceService.controlDevice(action.getDeviceId(), "turn_off", command);

        return String.format("ƒê√£ t·∫Øt thi·∫øt b·ªã %s", action.getDeviceId());
    }

    /**
     * G·ª≠i th√¥ng b√°o
     */
    private String sendNotification(Rule rule, Rule.RuleAction action) {
        Map<String, Object> notification = new HashMap<>();
        notification.put("type", "RULE_TRIGGERED");
        notification.put("ruleName", rule.getName());
        notification.put("message", action.getMessage());
        notification.put("timestamp", LocalDateTime.now().toString());

        webSocketService.sendAlert(rule.getFarm().getId(), notification);

        return "ƒê√£ g·ª≠i th√¥ng b√°o: " + action.getMessage();
    }

    /**
     * G·ª≠i email
     */
    private String sendEmailForRule(Rule rule, Rule.RuleAction action) {
        String ownerEmail = rule.getFarm().getOwner().getEmail();
        if (ownerEmail == null || ownerEmail.isEmpty()) {
            return "L·ªói: Kh√¥ng t√¨m th·∫•y email c·ªßa ch·ªß n√¥ng tr·∫°i.";
        }

        String subject = "[SmartFarm] Quy t·∫Øc t·ª± ƒë·ªông ƒë√£ k√≠ch ho·∫°t: " + rule.getName();
        String text = "Xin ch√†o,\n\n"
                + "Quy t·∫Øc t·ª± ƒë·ªông c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t t·∫°i n√¥ng tr·∫°i '" + rule.getFarm().getName() + "'.\n\n"
                + "T√™n quy t·∫Øc: " + rule.getName() + "\n"
                + "Th√¥ng ƒëi·ªáp: " + action.getMessage() + "\n\n"
                + "H·ªá th·ªëng ƒë√£ th·ª±c hi·ªán h√†nh ƒë·ªông t∆∞∆°ng ·ª©ng.\n\n"
                + "Tr√¢n tr·ªçng,\n"
                + "ƒê·ªôi ng≈© SmartFarm.";

        emailService.sendSimpleMessage(ownerEmail, subject, text);

        return "ƒê√£ g·ª≠i email c·∫£nh b√°o (t·ª´ quy t·∫Øc) t·ªõi: " + ownerEmail;
    }

    /**
     * L∆∞u log th·ª±c thi
     */
    private void saveExecutionLog(Rule rule, RuleExecutionLog.ExecutionStatus status,
            Boolean conditionsMet, Map<String, Object> conditionContext,
            List<String> actions, String errorMessage, long executionTime) {
        try {
            RuleExecutionLog log = RuleExecutionLog.builder()
                    .rule(rule)
                    .executedAt(LocalDateTime.now())
                    .status(status)
                    .conditionsMet(conditionsMet)
                    .conditionDetails(
                            conditionContext != null ? objectMapper.writeValueAsString(conditionContext) : null)
                    .actionsPerformed(actions != null ? objectMapper.writeValueAsString(actions) : null)
                    .errorMessage(errorMessage)
                    .executionTimeMs(executionTime)
                    .build();

            logRepository.save(log);

        } catch (JsonProcessingException e) {
            log.error("L·ªói khi l∆∞u execution log: {}", e.getMessage());
        }
    }

    private boolean evaluateWeatherCondition(RuleCondition condition, Map<String, Object> context) {
        try {
            Long farmId = condition.getRule().getFarm().getId();
            WeatherDTO weather = weatherService.getCurrentWeather(farmId);

            if (weather == null) {
                log.warn("Kh√¥ng c√≥ d·ªØ li·ªáu th·ªùi ti·∫øt cho farm {}", farmId);
                return false;
            }

            String field = condition.getField().toLowerCase();
            Double actualValue = null;

            switch (field) {
                case "rain_amount":
                case "rain":
                    actualValue = weather.getRainAmount();
                    break;
                case "temperature":
                    actualValue = weather.getTemperature();
                    break;
                case "humidity":
                    actualValue = weather.getHumidity();
                    break;
                case "wind_speed":
                    actualValue = weather.getWindSpeed();
                    break;
                default:
                    log.warn("Tr∆∞·ªùng th·ªùi ti·∫øt kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: {}", field);
                    return false;
            }

            if (actualValue == null) {
                return false;
            }

            Double expectedValue = Double.parseDouble(condition.getValue());
            context.put("weather_" + field, actualValue);
            context.put("weather_" + field + "_expected", expectedValue);

            boolean result = compareValues(actualValue, condition.getOperator(), expectedValue);

            log.info("üå§Ô∏è Ki·ªÉm tra th·ªùi ti·∫øt: {} {} {} = {}",
                    actualValue, condition.getOperator(), expectedValue, result);

            return result;

        } catch (Exception e) {
            log.error("L·ªói khi ki·ªÉm tra ƒëi·ªÅu ki·ªán th·ªùi ti·∫øt: {}", e.getMessage());
            return false;
        }
    }

}