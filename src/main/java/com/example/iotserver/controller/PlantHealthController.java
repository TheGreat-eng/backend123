package com.example.iotserver.controller;

import com.example.iotserver.dto.PlantHealthDTO;
import com.example.iotserver.entity.PlantHealthAlert;
import com.example.iotserver.service.PlantHealthService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

// ... imports
import com.example.iotserver.dto.response.ApiResponse; // <-- TH√äM IMPORT N√ÄY

/**
 * Controller x·ª≠ l√Ω c√°c API li√™n quan ƒë·∫øn s·ª©c kh·ªèe c√¢y tr·ªìng
 */
@RestController
@RequestMapping("/api/plant-health")
@RequiredArgsConstructor
@Slf4j
@Tag(name = "09. Plant Health", description = "API qu·∫£n l√Ω c·∫£nh b√°o s·ª©c kh·ªèe c√¢y tr·ªìng")
public class PlantHealthController {

    private final PlantHealthService plantHealthService;

    /**
     * API 1: L·∫•y t√¨nh tr·∫°ng s·ª©c kh·ªèe hi·ªán t·∫°i
     * GET /api/plant-health/current?farmId=1
     */
    @GetMapping("/current")
    @Operation(summary = "L·∫•y t√¨nh tr·∫°ng s·ª©c kh·ªèe hi·ªán t·∫°i", description = "Ph√¢n t√≠ch s·ª©c kh·ªèe c√¢y d·ª±a tr√™n d·ªØ li·ªáu c·∫£m bi·∫øn m·ªõi nh·∫•t v√† c√°c c·∫£nh b√°o ch∆∞a x·ª≠ l√Ω")
    public ResponseEntity<ApiResponse<PlantHealthDTO>> getCurrentHealth(
            @Parameter(description = "ID n√¥ng tr·∫°i", required = true) @RequestParam Long farmId) {
        log.info("üåø [API] L·∫•y s·ª©c kh·ªèe hi·ªán t·∫°i cho n√¥ng tr·∫°i: {}", farmId);

        try {
            PlantHealthDTO healthReport = plantHealthService.analyzeHealth(farmId);

            log.info("‚úÖ [API] ƒêi·ªÉm s·ª©c kh·ªèe: {}, Tr·∫°ng th√°i: {}, S·ªë c·∫£nh b√°o: {}",
                    healthReport.getHealthScore(),
                    healthReport.getStatus(),
                    healthReport.getActiveAlerts().size());

            return ResponseEntity.ok(ApiResponse.success("L·∫•y d·ªØ li·ªáu s·ª©c kh·ªèe th√†nh c√¥ng", healthReport));

        } catch (Exception e) {
            log.error("‚ùå [API] L·ªói khi l·∫•y s·ª©c kh·ªèe: {}", e.getMessage(), e);
            return ResponseEntity.internalServerError().body(ApiResponse.error("L·ªói m√°y ch·ªß khi ph√¢n t√≠ch s·ª©c kh·ªèe."));
        }
    }

    /**
     * API 2: L·∫•y l·ªãch s·ª≠ c·∫£nh b√°o
     * GET /api/plant-health/history?farmId=1&days=7
     */
    @GetMapping("/history")
    @Operation(summary = "L·∫•y l·ªãch s·ª≠ c·∫£nh b√°o", description = "Xem t·∫•t c·∫£ c·∫£nh b√°o trong N ng√†y g·∫ßn ƒë√¢y")
    public ResponseEntity<Map<String, Object>> getAlertHistory(
            @Parameter(description = "ID n√¥ng tr·∫°i", required = true) @RequestParam Long farmId,

            @Parameter(description = "S·ªë ng√†y l·∫•y l·ªãch s·ª≠ (m·∫∑c ƒë·ªãnh 7 ng√†y)") @RequestParam(defaultValue = "7") int days) {
        log.info("üìã [API] L·∫•y l·ªãch s·ª≠ c·∫£nh b√°o cho n√¥ng tr·∫°i {} trong {} ng√†y", farmId, days);

        try {
            List<PlantHealthAlert> alerts = plantHealthService.getAlertHistory(farmId, days);

            // Th·ªëng k√™
            Map<String, Long> stats = new HashMap<>();
            stats.put("total", (long) alerts.size());
            stats.put("resolved", alerts.stream().filter(PlantHealthAlert::getResolved).count());
            stats.put("unresolved", alerts.stream().filter(a -> !a.getResolved()).count());

            Map<String, Object> response = new HashMap<>();
            response.put("farmId", farmId);
            response.put("days", days);
            response.put("stats", stats);
            response.put("alerts", alerts);

            log.info("‚úÖ [API] T√¨m th·∫•y {} c·∫£nh b√°o trong {} ng√†y", alerts.size(), days);

            return ResponseEntity.ok(response);

        } catch (Exception e) {
            log.error("‚ùå [API] L·ªói khi l·∫•y l·ªãch s·ª≠: {}", e.getMessage(), e);
            return ResponseEntity.internalServerError().build();
        }
    }

    /**
     * API 3: Ph√¢n t√≠ch chi ti·∫øt
     * GET /api/plant-health/analyze?farmId=1
     */
    @GetMapping("/analyze")
    @Operation(summary = "Ph√¢n t√≠ch chi ti·∫øt s·ª©c kh·ªèe", description = "Ch·∫°y l·∫°i to√†n b·ªô 7 quy t·∫Øc v√† t·∫°o b√°o c√°o chi ti·∫øt")
    public ResponseEntity<Map<String, Object>> analyzeDetailed(
            @Parameter(description = "ID n√¥ng tr·∫°i", required = true) @RequestParam Long farmId) {
        log.info("üî¨ [API] Ph√¢n t√≠ch chi ti·∫øt cho n√¥ng tr·∫°i: {}", farmId);

        try {
            // Ch·∫°y ph√¢n t√≠ch
            PlantHealthDTO healthReport = plantHealthService.analyzeHealth(farmId);

            // L·∫•y l·ªãch s·ª≠ 7 ng√†y ƒë·ªÉ so s√°nh xu h∆∞·ªõng
            List<PlantHealthAlert> recentHistory = plantHealthService.getAlertHistory(farmId, 7);

            // T√≠nh xu h∆∞·ªõng
            String trend = calculateTrend(healthReport, recentHistory);

            Map<String, Object> response = new HashMap<>();
            response.put("currentHealth", healthReport);
            response.put("recentHistory", recentHistory);
            response.put("trend", trend);
            response.put("recommendations", generateRecommendations(healthReport));

            log.info("‚úÖ [API] Ho√†n th√†nh ph√¢n t√≠ch chi ti·∫øt. Xu h∆∞·ªõng: {}", trend);

            return ResponseEntity.ok(response);

        } catch (Exception e) {
            log.error("‚ùå [API] L·ªói khi ph√¢n t√≠ch: {}", e.getMessage(), e);
            return ResponseEntity.internalServerError().build();
        }
    }

    /**
     * API 4: ƒê√°nh d·∫•u c·∫£nh b√°o ƒë√£ x·ª≠ l√Ω
     * POST /api/plant-health/resolve/{alertId}
     */
    @PostMapping("/resolve/{alertId}")
    @Operation(summary = "ƒê√°nh d·∫•u c·∫£nh b√°o ƒë√£ x·ª≠ l√Ω", description = "ƒê√°nh d·∫•u m·ªôt c·∫£nh b√°o l√† ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω")
    public ResponseEntity<Map<String, Object>> resolveAlert(
            @Parameter(description = "ID c·∫£nh b√°o", required = true) @PathVariable Long alertId,

            @Parameter(description = "Ghi ch√∫ x·ª≠ l√Ω") @RequestBody(required = false) Map<String, String> request) {
        log.info("‚úÖ [API] ƒê√°nh d·∫•u c·∫£nh b√°o {} ƒë√£ x·ª≠ l√Ω", alertId);

        try {
            String resolutionNote = request != null ? request.get("note") : null;

            plantHealthService.resolveAlert(alertId, resolutionNote);

            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("message", "ƒê√£ ƒë√°nh d·∫•u c·∫£nh b√°o l√† ƒë√£ x·ª≠ l√Ω");
            response.put("alertId", alertId);

            return ResponseEntity.ok(response);

        } catch (RuntimeException e) {
            log.error("‚ùå [API] Kh√¥ng t√¨m th·∫•y c·∫£nh b√°o: {}", e.getMessage());

            Map<String, Object> response = new HashMap<>();
            response.put("success", false);
            response.put("message", e.getMessage());

            return ResponseEntity.badRequest().body(response);

        } catch (Exception e) {
            log.error("‚ùå [API] L·ªói khi x·ª≠ l√Ω c·∫£nh b√°o: {}", e.getMessage(), e);
            return ResponseEntity.internalServerError().build();
        }
    }

    /**
     * T√≠nh xu h∆∞·ªõng s·ª©c kh·ªèe (c·∫£i thi·ªán/gi·∫£m/·ªïn ƒë·ªãnh)
     */
    private String calculateTrend(PlantHealthDTO current, List<PlantHealthAlert> history) {
        if (history.isEmpty()) {
            return "stable";
        }

        // ƒê·∫øm s·ªë c·∫£nh b√°o trong 24h g·∫ßn nh·∫•t vs 24h tr∆∞·ªõc ƒë√≥
        long recent24h = history.stream()
                .filter(a -> a.getDetectedAt().isAfter(
                        java.time.LocalDateTime.now().minusDays(1)))
                .count();

        long previous24h = history.stream()
                .filter(a -> a.getDetectedAt().isBefore(
                        java.time.LocalDateTime.now().minusDays(1))
                        && a.getDetectedAt().isAfter(
                                java.time.LocalDateTime.now().minusDays(2)))
                .count();

        if (recent24h < previous24h) {
            return "improving"; // ƒêang c·∫£i thi·ªán
        } else if (recent24h > previous24h) {
            return "declining"; // ƒêang gi·∫£m
        } else {
            return "stable"; // ·ªîn ƒë·ªãnh
        }
    }

    /**
     * T·∫°o khuy·∫øn ngh·ªã d·ª±a tr√™n b√°o c√°o
     */
    private List<String> generateRecommendations(PlantHealthDTO health) {
        List<String> recommendations = new java.util.ArrayList<>();

        if (health.getHealthScore() >= 90) {
            recommendations.add("‚úÖ S·ª©c kh·ªèe c√¢y tuy·ªát v·ªùi! Ti·∫øp t·ª•c duy tr√¨ ch·∫ø ƒë·ªô chƒÉm s√≥c hi·ªán t·∫°i.");
        } else if (health.getHealthScore() >= 70) {
            recommendations.add("üëç S·ª©c kh·ªèe c√¢y t·ªët. Theo d√µi v√† x·ª≠ l√Ω c√°c v·∫•n ƒë·ªÅ nh·ªè k·ªãp th·ªùi.");
        } else if (health.getHealthScore() >= 50) {
            recommendations.add("‚ö†Ô∏è C·∫ßn ch√∫ √Ω! X·ª≠ l√Ω c√°c c·∫£nh b√°o m·ª©c HIGH v√† MEDIUM trong 24-48h.");
        } else {
            recommendations.add("üö® KH·∫®N C·∫§P! C·∫ßn x·ª≠ l√Ω NGAY c√°c v·∫•n ƒë·ªÅ nghi√™m tr·ªçng!");
        }

        // Th√™m khuy·∫øn ngh·ªã c·ª• th·ªÉ d·ª±a tr√™n lo·∫°i c·∫£nh b√°o
        if (health.getActiveAlerts() != null) {
            long fungusCount = health.getActiveAlerts().stream()
                    .filter(a -> a.getType().name().equals("FUNGUS")).count();
            if (fungusCount > 0) {
                recommendations.add("üçÑ TƒÉng c∆∞·ªùng th√¥ng gi√≥ v√† ki·ªÉm so√°t ƒë·ªô ·∫©m ƒë·ªÉ ngƒÉn n·∫•m ph√°t tri·ªÉn.");
            }

            long droughtCount = health.getActiveAlerts().stream()
                    .filter(a -> a.getType().name().equals("DROUGHT")).count();
            if (droughtCount > 0) {
                recommendations.add("üíß ƒêi·ªÅu ch·ªânh l·ªãch t∆∞·ªõi ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·ªô ·∫©m ƒë·∫•t ·ªïn ƒë·ªãnh.");
            }

            long heatCount = health.getActiveAlerts().stream()
                    .filter(a -> a.getType().name().equals("HEAT_STRESS")).count();
            if (heatCount > 0) {
                recommendations.add("üî• B·∫≠t h·ªá th·ªëng l√†m m√°t ho·∫∑c che ch·∫Øn trong gi·ªù n·∫Øng g·∫Øt.");
            }
        }

        return recommendations;
    }
}