package com.example.iotserver.controller;

import com.example.iotserver.dto.WeatherDTO;
import com.example.iotserver.dto.response.ApiResponse;
import com.example.iotserver.service.WeatherService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/weather")
@RequiredArgsConstructor
@Tag(name = "06. Weather", description = "API d·ªØ li·ªáu th·ªùi ti·∫øt")
public class WeatherController {

    private final WeatherService weatherService;

    /**
     * L·∫•y th·ªùi ti·∫øt hi·ªán t·∫°i
     * GET /api/weather/current?farmId=1
     */
    @GetMapping("/current")
    @Operation(summary = "L·∫•y th·ªùi ti·∫øt hi·ªán t·∫°i")
    public ResponseEntity<ApiResponse<WeatherDTO>> getCurrentWeather(
            @Parameter(description = "ID n√¥ng tr·∫°i") @RequestParam Long farmId) {
        WeatherDTO weather = weatherService.getCurrentWeather(farmId);
        return ResponseEntity.ok(ApiResponse.success(weather));
    }

    /**
     * L·∫•y d·ª± b√°o 5 ng√†y
     * GET /api/weather/forecast?farmId=1
     */
    @GetMapping("/forecast")
    @Operation(summary = "L·∫•y d·ª± b√°o th·ªùi ti·∫øt 5 ng√†y")
    public ResponseEntity<ApiResponse<WeatherDTO>> getForecast(
            @Parameter(description = "ID n√¥ng tr·∫°i") @RequestParam Long farmId) {
        WeatherDTO forecast = weatherService.getWeatherForecast(farmId);
        return ResponseEntity.ok(ApiResponse.success(forecast));
    }

    /**
     * Force update th·ªùi ti·∫øt (manual trigger)
     * POST /api/weather/update?farmId=1
     */
    @PostMapping("/update")
    @Operation(summary = "C·∫≠p nh·∫≠t th·ªùi ti·∫øt th·ªß c√¥ng")
    public ResponseEntity<ApiResponse<String>> forceUpdate(
            @Parameter(description = "ID n√¥ng tr·∫°i") @RequestParam Long farmId) {
        weatherService.updateAllWeatherData();
        return ResponseEntity.ok(ApiResponse.success(
                "ƒê√£ c·∫≠p nh·∫≠t th·ªùi ti·∫øt th√†nh c√¥ng",
                "Updated"));
    }

    /**
     * Ki·ªÉm tra ·∫£nh h∆∞·ªüng th·ªùi ti·∫øt l√™n Rule
     * GET /api/weather/rule-impact?farmId=1
     */
    @GetMapping("/rule-impact")
    @Operation(summary = "Ki·ªÉm tra ·∫£nh h∆∞·ªüng th·ªùi ti·∫øt l√™n quy t·∫Øc t·ª± ƒë·ªông")
    public ResponseEntity<ApiResponse<Map<String, Object>>> getRuleImpact(
            @Parameter(description = "ID n√¥ng tr·∫°i") @RequestParam Long farmId) {

        WeatherDTO weather = weatherService.getCurrentWeather(farmId);
        Map<String, Object> impact = new HashMap<>();

        List<String> suggestions = new ArrayList<>();
        boolean shouldStopWatering = false;

        // Ki·ªÉm tra m∆∞a
        if (weather.getRainAmount() != null && weather.getRainAmount() > 5.0) {
            suggestions.add("‚õî T·∫ÆT H·ªÜ TH·ªêNG T∆Ø·ªöI - D·ª± b√°o m∆∞a l·ªõn");
            shouldStopWatering = true;
        } else if (weather.getRainAmount() != null && weather.getRainAmount() > 0) {
            suggestions.add("‚ö†Ô∏è GI·∫¢M T∆Ø·ªöI 50% - C√≥ m∆∞a nh·∫π");
        }

        // Ki·ªÉm tra n·∫Øng n√≥ng
        if (weather.getTemperature() > 38) {
            suggestions.add("üî• TƒÇNG T∆Ø·ªöI 20% - N·∫Øng n√≥ng c·ª±c ƒëoan");
        }

        // Ki·ªÉm tra ƒë·ªô ·∫©m cao
        if (weather.getHumidity() > 85) {
            suggestions.add("üí® TƒÇNG TH√îNG GI√ì - Nguy c∆° n·∫•m");
        }

        impact.put("weather", weather);
        impact.put("shouldStopWatering", shouldStopWatering);
        impact.put("suggestions", suggestions);
        impact.put("timestamp", LocalDateTime.now());

        return ResponseEntity.ok(ApiResponse.success(impact));
    }
}