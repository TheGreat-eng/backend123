import paho.mqtt.client as mqtt
import json
import time
import random
from datetime import datetime

# MQTT Configuration
MQTT_BROKER = "localhost"
MQTT_PORT = 1883
MQTT_USERNAME = "admin"
MQTT_PASSWORD = "admin123"

# ‚úÖ TH√äM PUMP-0001 V√ÄO DANH S√ÅCH DEVICES
DEVICES = {
    "TEMP-0001": {
        "type": "temperature",
        "topic": "device/TEMP-0001/data",
        "farm_id": 1
    },
    "HUM-0001": {
        "type": "humidity", 
        "topic": "device/HUM-0001/data",
        "farm_id": 1
    },
    "SOIL-0001": {
        "type": "soil_moisture",
        "topic": "device/SOIL-0001/data",
        "farm_id": 1
    },
    "LIGHT-0001": {
        "type": "light_intensity",
        "topic": "device/LIGHT-0001/data",
        "farm_id": 1
    },
    # ‚úÖ TH√äM M·ªöI: M√°y b∆°m v·ªõi soil_moisture th·∫•p ƒë·ªÉ test rule
    "PUMP-0001": {
        "type": "soil_moisture",  # ‚¨ÖÔ∏è Gi·∫£ l·∫≠p ƒë·ªô ·∫©m ƒë·∫•t th·∫•p
        "topic": "device/PUMP-0001/data",
        "farm_id": 1
    }
}

def on_connect(client, userdata, flags, rc):
    if rc == 0:
        print("‚úÖ Connected to MQTT Broker!")
    else:
        print(f"‚ùå Failed to connect, return code {rc}")

def generate_sensor_data(device_id, device_info):
    """T·∫°o d·ªØ li·ªáu sensor ng·∫´u nhi√™n"""
    sensor_type = device_info["type"]
    
    # ‚úÖ TH√äM: Gi·∫£ l·∫≠p PUMP-0001 c√≥ ƒë·ªô ·∫©m ƒë·∫•t th·∫•p (< 30%) ƒë·ªÉ k√≠ch ho·∫°t rule
    if device_id == "PUMP-0001":
        # ƒê·ªô ·∫©m ƒë·∫•t th·∫•p ƒë·ªÉ k√≠ch ho·∫°t rule "T∆∞·ªõi n∆∞·ªõc t·ª± ƒë·ªông"
        soil_moisture = round(random.uniform(15.0, 28.0), 2)  # ‚¨ÖÔ∏è < 30%
        return {
            "device_id": device_id,
            "farm_id": device_info["farm_id"],
            "sensor_type": sensor_type,
            "soil_moisture": soil_moisture,
            "timestamp": int(datetime.now().timestamp() * 1000)
        }
    
    # ‚úÖ GI·ªÆ NGUY√äN: Logic c≈© cho c√°c sensor kh√°c
    if sensor_type == "temperature":
        value = round(random.uniform(20.0, 35.0), 2)
        return {
            "device_id": device_id,
            "farm_id": device_info["farm_id"],
            "sensor_type": sensor_type,
            "temperature": value,
            "timestamp": int(datetime.now().timestamp() * 1000)
        }
    
    elif sensor_type == "humidity":
        value = round(random.uniform(40.0, 80.0), 2)
        return {
            "device_id": device_id,
            "farm_id": device_info["farm_id"],
            "sensor_type": sensor_type,
            "humidity": value,
            "timestamp": int(datetime.now().timestamp() * 1000)
        }
    
    elif sensor_type == "soil_moisture":
        value = round(random.uniform(25.0, 65.0), 2)
        return {
            "device_id": device_id,
            "farm_id": device_info["farm_id"],
            "sensor_type": sensor_type,
            "soil_moisture": value,
            "timestamp": int(datetime.now().timestamp() * 1000)
        }
    
    elif sensor_type == "light_intensity":
        value = round(random.uniform(1000.0, 5000.0), 2)
        return {
            "device_id": device_id,
            "farm_id": device_info["farm_id"],
            "sensor_type": sensor_type,
            "light_intensity": value,
            "timestamp": int(datetime.now().timestamp() * 1000)
        }

def main():
    client = mqtt.Client()
    client.username_pw_set(MQTT_USERNAME, MQTT_PASSWORD)
    client.on_connect = on_connect
    
    print(f"üîÑ Connecting to MQTT Broker at {MQTT_BROKER}:{MQTT_PORT}...")
    client.connect(MQTT_BROKER, MQTT_PORT, 60)
    client.loop_start()
    
    print("\nüì° Starting sensor data simulation...")
    print(f"üìä Simulating {len(DEVICES)} devices: {', '.join(DEVICES.keys())}")
    print("‚è±Ô∏è  Sending data every 10 seconds\n")
    
    try:
        while True:
            for device_id, device_info in DEVICES.items():
                data = generate_sensor_data(device_id, device_info)
                topic = device_info["topic"]
                
                # Publish data
                result = client.publish(topic, json.dumps(data))
                
                # Log
                if result.rc == 0:
                    print(f"‚úÖ [{datetime.now().strftime('%H:%M:%S')}] {device_id}: {data}")
                    
                    # ‚úÖ TH√äM: Highlight khi PUMP-0001 g·ª≠i d·ªØ li·ªáu ƒë·ªô ·∫©m th·∫•p
                    if device_id == "PUMP-0001" and data.get("soil_moisture", 100) < 30:
                        print(f"   ‚ö†Ô∏è  ƒê·ªô ·∫©m th·∫•p! Rule 'T∆∞·ªõi n∆∞·ªõc t·ª± ƒë·ªông' s·∫Ω ƒë∆∞·ª£c k√≠ch ho·∫°t!")
                else:
                    print(f"‚ùå Failed to send data for {device_id}")
            
            time.sleep(10)  # G·ª≠i m·ªói 10 gi√¢y
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Stopping simulation...")
        client.loop_stop()
        client.disconnect()
        print("‚úÖ Disconnected from MQTT Broker")

if __name__ == "__main__":
    main()