package com.example.iotserver.service;

import com.example.iotserver.dto.PlantHealthDTO;
import com.example.iotserver.dto.SensorDataDTO;
import com.example.iotserver.entity.PlantHealthAlert;
import com.example.iotserver.entity.PlantHealthAlert.AlertType;
import com.example.iotserver.entity.PlantHealthAlert.Severity;
import com.example.iotserver.repository.PlantHealthAlertRepository;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.*;
import java.util.stream.Collectors;

import com.example.iotserver.entity.Farm; // <<<< 1. TH√äM IMPORT
import com.example.iotserver.repository.FarmRepository; // <<<< 1. TH√äM IMPORT

/**
 * Service x·ª≠ l√Ω logic c·∫£nh b√°o s·ª©c kh·ªèe c√¢y tr·ªìng
 * Bao g·ªìm 7 quy t·∫Øc th√¥ng minh
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class PlantHealthService {

    private final PlantHealthAlertRepository alertRepository;
    private final SensorDataService sensorDataService;
    private final ObjectMapper objectMapper;
    private final EmailService emailService; // <<<< 2. INJECT EMAILSERVICE
    private final FarmRepository farmRepository; // <<<< 2. INJECT FARMREPOSITORY

    // C√°c ng∆∞·ª°ng c·∫£nh b√°o
    private static final double FUNGUS_HUMIDITY_THRESHOLD = 85.0;
    private static final double FUNGUS_TEMP_MIN = 20.0;
    private static final double FUNGUS_TEMP_MAX = 28.0;

    private static final double HEAT_STRESS_THRESHOLD = 38.0;
    private static final double DROUGHT_THRESHOLD = 30.0;
    private static final double COLD_THRESHOLD = 12.0;

    private static final double MOISTURE_CHANGE_THRESHOLD = 30.0;
    private static final double LIGHT_THRESHOLD = 1000.0;

    private static final double PH_MIN = 5.0;
    private static final double PH_MAX = 7.5;

    /**
     * Ph√¢n t√≠ch s·ª©c kh·ªèe t·ªïng th·ªÉ c·ªßa n√¥ng tr·∫°i
     */
    @Transactional
    public PlantHealthDTO analyzeHealth(Long farmId) {
        log.info("üåø B·∫Øt ƒë·∫ßu ph√¢n t√≠ch s·ª©c kh·ªèe cho n√¥ng tr·∫°i: {}", farmId);

        SensorDataDTO latestData = sensorDataService.getLatestSensorDataByFarmId(farmId);

        if (latestData == null) {
            log.warn("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu c·∫£m bi·∫øn cho n√¥ng tr·∫°i: {}", farmId);
            return createEmptyHealthReport(farmId);
        }

        // B∆Ø·ªöC M·ªöI: L·∫•y danh s√°ch c·∫£nh b√°o ƒëang ho·∫°t ƒë·ªông TR∆Ø·ªöC KHI ki·ªÉm tra
        List<PlantHealthAlert> activeAlertsBeforeCheck = alertRepository
                .findByFarmIdAndResolvedFalseOrderByDetectedAtDesc(farmId);

        // Truy·ªÅn danh s√°ch n√†y v√†o h√†m checkAllRules
        List<PlantHealthAlert> newAlerts = checkAllRules(farmId, latestData, activeAlertsBeforeCheck);

        if (!newAlerts.isEmpty()) {
            alertRepository.saveAll(newAlerts);
            log.info("‚úÖ ƒê√£ t·∫°o {} c·∫£nh b√°o m·ªõi", newAlerts.size());
        }

        // <<<< 3. G·ªåI H√ÄM G·ª¨I EMAIL >>>>
        sendEmailForNewHealthAlerts(newAlerts);

        // L·∫•y l·∫°i danh s√°ch ƒë·∫ßy ƒë·ªß sau khi ƒë√£ th√™m m·ªõi (n·∫øu c√≥)
        List<PlantHealthAlert> allActiveAlerts = alertRepository
                .findByFarmIdAndResolvedFalseOrderByDetectedAtDesc(farmId);

        Integer healthScore = calculateHealthScore(allActiveAlerts);
        return buildHealthReport(healthScore, allActiveAlerts, latestData);
    }

    /**
     * Ki·ªÉm tra t·∫•t c·∫£ 7 quy t·∫Øc
     */
    private List<PlantHealthAlert> checkAllRules(Long farmId, SensorDataDTO data,
            List<PlantHealthAlert> existingAlerts) {
        List<PlantHealthAlert> alerts = new ArrayList<>();

        // L·∫•y danh s√°ch c√°c lo·∫°i c·∫£nh b√°o ƒë√£ t·ªìn t·∫°i ƒë·ªÉ ki·ªÉm tra nhanh
        Set<AlertType> existingAlertTypes = existingAlerts.stream()
                .map(PlantHealthAlert::getAlertType)
                .collect(Collectors.toSet());

        // S·ª≠a ƒë·ªïi m·ªói l·∫ßn g·ªçi h√†m check: ch·ªâ th√™m n·∫øu lo·∫°i c·∫£nh b√°o ƒë√≥ ch∆∞a t·ªìn t·∫°i
        if (!existingAlertTypes.contains(AlertType.FUNGUS)) {
            checkFungusRisk(farmId, data).ifPresent(alerts::add);
        }
        if (!existingAlertTypes.contains(AlertType.HEAT_STRESS)) {
            checkHeatStress(farmId, data).ifPresent(alerts::add);
        }
        if (!existingAlertTypes.contains(AlertType.DROUGHT)) {
            checkDrought(farmId, data).ifPresent(alerts::add);
        }
        if (!existingAlertTypes.contains(AlertType.COLD)) {
            checkColdRisk(farmId, data).ifPresent(alerts::add);
        }
        if (!existingAlertTypes.contains(AlertType.UNSTABLE_MOISTURE)) {
            checkUnstableMoisture(farmId, data).ifPresent(alerts::add);
        }
        if (!existingAlertTypes.contains(AlertType.LOW_LIGHT)) {
            checkLowLight(farmId, data).ifPresent(alerts::add);
        }
        if (!existingAlertTypes.contains(AlertType.PH_ABNORMAL)) {
            checkPHAbnormal(farmId, data).ifPresent(alerts::add);
        }

        return alerts;
    }

    /**
     * QUY T·∫ÆC 1: Ph√°t hi·ªán nguy c∆° n·∫•m üçÑ
     * ƒêi·ªÅu ki·ªán: ƒê·ªô ·∫©m > 85% AND nhi·ªát ƒë·ªô 20-28¬∞C
     */
    private Optional<PlantHealthAlert> checkFungusRisk(Long farmId, SensorDataDTO data) {
        if (data.getHumidity() != null && data.getTemperature() != null) {
            boolean highHumidity = data.getHumidity() > FUNGUS_HUMIDITY_THRESHOLD;
            boolean optimalTemp = data.getTemperature() >= FUNGUS_TEMP_MIN
                    && data.getTemperature() <= FUNGUS_TEMP_MAX;

            if (highHumidity && optimalTemp) {
                log.warn("üçÑ Ph√°t hi·ªán nguy c∆° n·∫•m! ƒê·ªô ·∫©m: {}%, Nhi·ªát ƒë·ªô: {}¬∞C",
                        data.getHumidity(), data.getTemperature());

                return Optional.of(PlantHealthAlert.builder()
                        .farmId(farmId)
                        .alertType(AlertType.FUNGUS)
                        .severity(data.getHumidity() > 90 ? Severity.HIGH : Severity.MEDIUM)
                        .description(String.format(
                                "Nguy c∆° n·∫•m cao - ƒê·ªô ·∫©m %.1f%%, nhi·ªát ƒë·ªô %.1f¬∞C thu·∫≠n l·ª£i cho n·∫•m ph√°t tri·ªÉn",
                                data.getHumidity(), data.getTemperature()))
                        .suggestion("TƒÉng th√¥ng gi√≥, gi·∫£m t∆∞·ªõi n∆∞·ªõc, xem x√©t x·ª≠ l√Ω phun thu·ªëc ph√≤ng n·∫•m")
                        .conditions(createConditionsJson(data))
                        .build());
            }
        }
        return Optional.empty();
    }

    /**
     * QUY T·∫ÆC 2: Ph√°t hi·ªán stress nhi·ªát üî•
     * ƒêi·ªÅu ki·ªán: Nhi·ªát ƒë·ªô > 38¬∞C
     */
    private Optional<PlantHealthAlert> checkHeatStress(Long farmId, SensorDataDTO data) {
        if (data.getTemperature() != null && data.getTemperature() > HEAT_STRESS_THRESHOLD) {
            log.warn("üî• Ph√°t hi·ªán stress nhi·ªát! Nhi·ªát ƒë·ªô: {}¬∞C", data.getTemperature());

            return Optional.of(PlantHealthAlert.builder()
                    .farmId(farmId)
                    .alertType(AlertType.HEAT_STRESS)
                    .severity(data.getTemperature() > 42 ? Severity.CRITICAL : Severity.HIGH)
                    .description(String.format(
                            "C√¢y ƒëang b·ªã stress nhi·ªát - Nhi·ªát ƒë·ªô %.1f¬∞C v∆∞·ª£t ng∆∞·ª°ng an to√†n",
                            data.getTemperature()))
                    .suggestion("Phun s∆∞∆°ng l√†m m√°t, che ch·∫Øn n·∫Øng, t∆∞·ªõi n∆∞·ªõc nh·∫π v√†o bu·ªïi t·ªëi")
                    .conditions(createConditionsJson(data))
                    .build());
        }
        return Optional.empty();
    }

    /**
     * QUY T·∫ÆC 3: Ph√°t hi·ªán thi·∫øu n∆∞·ªõc üíß
     * ƒêi·ªÅu ki·ªán: ƒê·ªô ·∫©m ƒë·∫•t < 30%
     */
    private Optional<PlantHealthAlert> checkDrought(Long farmId, SensorDataDTO data) {
        if (data.getSoilMoisture() != null && data.getSoilMoisture() < DROUGHT_THRESHOLD) {
            log.warn("üíß Ph√°t hi·ªán thi·∫øu n∆∞·ªõc! ƒê·ªô ·∫©m ƒë·∫•t: {}%", data.getSoilMoisture());

            return Optional.of(PlantHealthAlert.builder()
                    .farmId(farmId)
                    .alertType(AlertType.DROUGHT)
                    .severity(data.getSoilMoisture() < 20 ? Severity.CRITICAL : Severity.HIGH)
                    .description(String.format(
                            "C√¢y thi·∫øu n∆∞·ªõc nghi√™m tr·ªçng - ƒê·ªô ·∫©m ƒë·∫•t ch·ªâ c√≤n %.1f%%",
                            data.getSoilMoisture()))
                    .suggestion("T∆∞·ªõi n∆∞·ªõc ngay l·∫≠p t·ª©c, ki·ªÉm tra h·ªá th·ªëng t∆∞·ªõi, xem x√©t t∆∞·ªõi nh·ªè gi·ªçt")
                    .conditions(createConditionsJson(data))
                    .build());
        }
        return Optional.empty();
    }

    /**
     * QUY T·∫ÆC 4: Ph√°t hi·ªán nguy c∆° l·∫°nh ‚ùÑÔ∏è
     * ƒêi·ªÅu ki·ªán: Nhi·ªát ƒë·ªô < 12¬∞C v√†o ban ƒë√™m (22h-6h)
     */
    private Optional<PlantHealthAlert> checkColdRisk(Long farmId, SensorDataDTO data) {
        if (data.getTemperature() != null && data.getTemperature() < COLD_THRESHOLD) {
            LocalTime now = LocalTime.now();
            boolean isNightTime = now.isAfter(LocalTime.of(22, 0))
                    || now.isBefore(LocalTime.of(6, 0));

            if (isNightTime) {
                log.warn("‚ùÑÔ∏è Ph√°t hi·ªán nguy c∆° l·∫°nh! Nhi·ªát ƒë·ªô ƒë√™m: {}¬∞C", data.getTemperature());

                return Optional.of(PlantHealthAlert.builder()
                        .farmId(farmId)
                        .alertType(AlertType.COLD)
                        .severity(data.getTemperature() < 8 ? Severity.HIGH : Severity.MEDIUM)
                        .description(String.format(
                                "Nguy c∆° c√¢y b·ªã l·∫°nh - Nhi·ªát ƒë·ªô ƒë√™m %.1f¬∞C qu√° th·∫•p",
                                data.getTemperature()))
                        .suggestion("Che ph·ªß cho c√¢y, d·ª´ng t∆∞·ªõi v√†o ƒë√™m, xem x√©t b·∫≠t ƒë√®n s∆∞·ªüi n·∫øu c√≥")
                        .conditions(createConditionsJson(data))
                        .build());
            }
        }
        return Optional.empty();
    }

    /**
     * QUY T·∫ÆC 5: Ph√°t hi·ªán ƒë·ªô ·∫©m dao ƒë·ªông m·∫°nh ‚ö°
     * ƒêi·ªÅu ki·ªán: ƒê·ªô ·∫©m thay ƒë·ªïi > 30% trong 6 gi·ªù
     */
    private Optional<PlantHealthAlert> checkUnstableMoisture(Long farmId, SensorDataDTO data) {
        if (data.getSoilMoisture() != null) {
            // L·∫•y d·ªØ li·ªáu 6 gi·ªù tr∆∞·ªõc
            SensorDataDTO oldData = sensorDataService.getSensorDataAt(
                    farmId, LocalDateTime.now().minusHours(6));

            if (oldData != null && oldData.getSoilMoisture() != null) {
                double change = Math.abs(data.getSoilMoisture() - oldData.getSoilMoisture());

                if (change > MOISTURE_CHANGE_THRESHOLD) {
                    log.warn("‚ö° Ph√°t hi·ªán ƒë·ªô ·∫©m dao ƒë·ªông m·∫°nh! Thay ƒë·ªïi: {}%", change);

                    return Optional.of(PlantHealthAlert.builder()
                            .farmId(farmId)
                            .alertType(AlertType.UNSTABLE_MOISTURE)
                            .severity(Severity.MEDIUM)
                            .description(String.format(
                                    "ƒê·ªô ·∫©m ƒë·∫•t dao ƒë·ªông m·∫°nh - Thay ƒë·ªïi %.1f%% trong 6 gi·ªù (t·ª´ %.1f%% l√™n %.1f%%)",
                                    change, oldData.getSoilMoisture(), data.getSoilMoisture()))
                            .suggestion("ƒêi·ªÅu ch·ªânh l·ªãch t∆∞·ªõi ƒë·ªÅu ƒë·∫∑n h∆°n, ki·ªÉm tra h·ªá th·ªëng tho√°t n∆∞·ªõc")
                            .conditions(createConditionsJson(data))
                            .build());
                }
            }
        }
        return Optional.empty();
    }

    /**
     * QUY T·∫ÆC 6: Ph√°t hi·ªán thi·∫øu √°nh s√°ng üå•Ô∏è
     * ƒêi·ªÅu ki·ªán: √Ånh s√°ng < 1000 lux ban ng√†y
     */
    private Optional<PlantHealthAlert> checkLowLight(Long farmId, SensorDataDTO data) {
        if (data.getLightIntensity() != null && data.getLightIntensity() < LIGHT_THRESHOLD) {
            LocalTime now = LocalTime.now();
            boolean isDaytime = now.isAfter(LocalTime.of(8, 0))
                    && now.isBefore(LocalTime.of(18, 0));

            if (isDaytime) {
                log.warn("üå•Ô∏è Ph√°t hi·ªán thi·∫øu √°nh s√°ng! C∆∞·ªùng ƒë·ªô: {} lux", data.getLightIntensity());

                return Optional.of(PlantHealthAlert.builder()
                        .farmId(farmId)
                        .alertType(AlertType.LOW_LIGHT)
                        .severity(Severity.MEDIUM)
                        .description(String.format(
                                "C√¢y thi·∫øu √°nh s√°ng - C∆∞·ªùng ƒë·ªô ch·ªâ %.0f lux v√†o ban ng√†y",
                                data.getLightIntensity()))
                        .suggestion("B·∫≠t ƒë√®n b·ªï sung, c·∫Øt t·ªâa c√¢y che b√≥ng, di chuy·ªÉn c√¢y ra ch·ªó s√°ng h∆°n")
                        .conditions(createConditionsJson(data))
                        .build());
            }
        }
        return Optional.empty();
    }

    /**
     * QUY T·∫ÆC 7: Ph√°t hi·ªán pH b·∫•t th∆∞·ªùng ‚öóÔ∏è
     * ƒêi·ªÅu ki·ªán: pH < 5.0 ho·∫∑c pH > 7.5
     */
    private Optional<PlantHealthAlert> checkPHAbnormal(Long farmId, SensorDataDTO data) {
        if (data.getSoilPH() != null) {
            boolean abnormal = data.getSoilPH() < PH_MIN || data.getSoilPH() > PH_MAX;

            if (abnormal) {
                log.warn("‚öóÔ∏è Ph√°t hi·ªán pH b·∫•t th∆∞·ªùng! pH: {}", data.getSoilPH());

                String description;
                String suggestion;

                if (data.getSoilPH() < PH_MIN) {
                    description = String.format(
                            "ƒê·∫•t qu√° chua - pH %.1f th·∫•p h∆°n m·ª©c an to√†n",
                            data.getSoilPH());
                    suggestion = "B√≥n v√¥i ƒë·ªÉ tƒÉng pH, s·ª≠ d·ª•ng ph√¢n h·ªØu c∆°, tr√°nh ph√¢n h√≥a h·ªçc";
                } else {
                    description = String.format(
                            "ƒê·∫•t qu√° ki·ªÅm - pH %.1f cao h∆°n m·ª©c an to√†n",
                            data.getSoilPH());
                    suggestion = "B√≥n l∆∞u hu·ª≥nh ho·∫∑c ph√¢n chua ƒë·ªÉ gi·∫£m pH, tr√°nh d√πng v√¥i";
                }

                return Optional.of(PlantHealthAlert.builder()
                        .farmId(farmId)
                        .alertType(AlertType.PH_ABNORMAL)
                        .severity(Severity.MEDIUM)
                        .description(description)
                        .suggestion(suggestion)
                        .conditions(createConditionsJson(data))
                        .build());
            }
        }
        return Optional.empty();
    }

    /**
     * T√≠nh ƒëi·ªÉm s·ª©c kh·ªèe d·ª±a tr√™n s·ªë l∆∞·ª£ng v√† m·ª©c ƒë·ªô c·∫£nh b√°o
     * C√¥ng th·ª©c: 100 - (CRITICAL√ó25) - (HIGH√ó15) - (MEDIUM√ó8) - (LOW√ó3)
     */
    private Integer calculateHealthScore(List<PlantHealthAlert> alerts) {
        if (alerts.isEmpty()) {
            return 100;
        }

        int score = 100;

        for (PlantHealthAlert alert : alerts) {
            switch (alert.getSeverity()) {
                case CRITICAL -> score -= 25;
                case HIGH -> score -= 15;
                case MEDIUM -> score -= 8;
                case LOW -> score -= 3;
            }
        }

        return Math.max(0, score);
    }

    /**
     * T·∫°o b√°o c√°o s·ª©c kh·ªèe ƒë·∫ßy ƒë·ªß
     */
    private PlantHealthDTO buildHealthReport(
            Integer healthScore,
            List<PlantHealthAlert> alerts,
            SensorDataDTO latestData) {
        // Chuy·ªÉn ƒë·ªïi alerts sang DTO
        List<PlantHealthDTO.AlertDTO> alertDTOs = alerts.stream()
                .map(this::convertToAlertDTO)
                .collect(Collectors.toList());

        // T√≠nh th·ªëng k√™ m·ª©c ƒë·ªô
        PlantHealthDTO.SeverityStats stats = PlantHealthDTO.SeverityStats.builder()
                .critical(alerts.stream().filter(a -> a.getSeverity() == Severity.CRITICAL).count())
                .high(alerts.stream().filter(a -> a.getSeverity() == Severity.HIGH).count())
                .medium(alerts.stream().filter(a -> a.getSeverity() == Severity.MEDIUM).count())
                .low(alerts.stream().filter(a -> a.getSeverity() == Severity.LOW).count())
                .total(alerts.size())
                .build();

        // T·∫°o g·ª£i √Ω t·ªïng qu√°t
        String overallSuggestion = generateOverallSuggestion(alerts);

        // ƒêi·ªÅu ki·ªán hi·ªán t·∫°i
        Map<String, Object> conditions = new HashMap<>();
        if (latestData != null) {
            conditions.put("temperature", latestData.getTemperature());
            conditions.put("humidity", latestData.getHumidity());
            conditions.put("soilMoisture", latestData.getSoilMoisture());
            conditions.put("lightIntensity", latestData.getLightIntensity());
            conditions.put("soilPH", latestData.getSoilPH());
        }

        // X√°c ƒë·ªãnh tr·∫°ng th√°i
        String status = PlantHealthDTO.HealthStatus.fromScore(healthScore).name();

        return PlantHealthDTO.builder()
                .healthScore(healthScore)
                .status(status)
                .activeAlerts(alertDTOs)
                .conditions(conditions)
                .overallSuggestion(overallSuggestion)
                .analyzedAt(LocalDateTime.now())
                .severityStats(stats)
                .build();
    }

    /**
     * T·∫°o g·ª£i √Ω t·ªïng qu√°t d·ª±a tr√™n c√°c c·∫£nh b√°o
     */
    private String generateOverallSuggestion(List<PlantHealthAlert> alerts) {
        if (alerts.isEmpty()) {
            return "S·ª©c kh·ªèe c√¢y t·ªët! Ti·∫øp t·ª•c duy tr√¨ ch·∫ø ƒë·ªô chƒÉm s√≥c hi·ªán t·∫°i.";
        }

        long criticalCount = alerts.stream()
                .filter(a -> a.getSeverity() == Severity.CRITICAL)
                .count();
        long highCount = alerts.stream()
                .filter(a -> a.getSeverity() == Severity.HIGH)
                .count();

        if (criticalCount > 0) {
            return String.format(
                    "‚ö†Ô∏è C·∫¶N X·ª¨ L√ù NGAY! Ph√°t hi·ªán %d v·∫•n ƒë·ªÅ nghi√™m tr·ªçng. Ki·ªÉm tra v√† x·ª≠ l√Ω c√°c c·∫£nh b√°o CRITICAL ngay l·∫≠p t·ª©c.",
                    criticalCount);
        }

        if (highCount > 0) {
            return String.format(
                    "‚ö†Ô∏è C·∫ßn ch√∫ √Ω! Ph√°t hi·ªán %d v·∫•n ƒë·ªÅ m·ª©c cao. N√™n x·ª≠ l√Ω trong v√≤ng 24 gi·ªù ƒë·ªÉ tr√°nh ·∫£nh h∆∞·ªüng ƒë·∫øn c√¢y.",
                    highCount);
        }

        return String.format(
                "Ph√°t hi·ªán %d v·∫•n ƒë·ªÅ nh·ªè. Theo d√µi v√† ƒëi·ªÅu ch·ªânh d·∫ßn d·∫ßn.",
                alerts.size());
    }

    /**
     * Chuy·ªÉn ƒë·ªïi Alert entity sang DTO
     */
    private PlantHealthDTO.AlertDTO convertToAlertDTO(PlantHealthAlert alert) {
        Map<String, Object> conditions = new HashMap<>();
        if (alert.getConditions() != null) {
            alert.getConditions().fields().forEachRemaining(entry -> conditions.put(entry.getKey(), entry.getValue()));
        }

        return PlantHealthDTO.AlertDTO.builder()
                .id(alert.getId())
                .type(alert.getAlertType())
                .typeName(alert.getAlertType().getDisplayName())
                .severity(alert.getSeverity())
                .severityName(alert.getSeverity().getDisplayName())
                .description(alert.getDescription())
                .suggestion(alert.getSuggestion())
                .detectedAt(alert.getDetectedAt())
                .conditions(conditions)
                .build();
    }

    /**
     * T·∫°o JSON ch·ª©a ƒëi·ªÅu ki·ªán m√¥i tr∆∞·ªùng
     */
    private ObjectNode createConditionsJson(SensorDataDTO data) {
        ObjectNode conditions = objectMapper.createObjectNode();

        if (data.getTemperature() != null) {
            conditions.put("temperature", data.getTemperature());
        }
        if (data.getHumidity() != null) {
            conditions.put("humidity", data.getHumidity());
        }
        if (data.getSoilMoisture() != null) {
            conditions.put("soilMoisture", data.getSoilMoisture());
        }
        if (data.getLightIntensity() != null) {
            conditions.put("lightIntensity", data.getLightIntensity());
        }
        if (data.getSoilPH() != null) {
            conditions.put("soilPH", data.getSoilPH());
        }

        return conditions;
    }

    /**
     * T·∫°o b√°o c√°o tr·ªëng khi kh√¥ng c√≥ d·ªØ li·ªáu
     */
    private PlantHealthDTO createEmptyHealthReport(Long farmId) {
        return PlantHealthDTO.builder()
                .healthScore(0)
                .status(PlantHealthDTO.HealthStatus.CRITICAL.name())
                .activeAlerts(Collections.emptyList())
                .conditions(Collections.emptyMap())
                .overallSuggestion("Kh√¥ng c√≥ d·ªØ li·ªáu c·∫£m bi·∫øn. Ki·ªÉm tra k·∫øt n·ªëi thi·∫øt b·ªã.")
                .analyzedAt(LocalDateTime.now())
                .severityStats(PlantHealthDTO.SeverityStats.builder()
                        .critical(0L).high(0L).medium(0L).low(0L).total(0L).build())
                .build();
    }

    /**
     * L·∫•y l·ªãch s·ª≠ c·∫£nh b√°o trong N ng√†y
     */
    public List<PlantHealthAlert> getAlertHistory(Long farmId, int days) {
        LocalDateTime startDate = LocalDateTime.now().minusDays(days);
        LocalDateTime endDate = LocalDateTime.now();

        return alertRepository.findByFarmIdAndDetectedAtBetweenOrderByDetectedAtDesc(
                farmId, startDate, endDate);
    }

    /**
     * ƒê√°nh d·∫•u c·∫£nh b√°o ƒë√£ x·ª≠ l√Ω
     */
    @Transactional
    public void resolveAlert(Long alertId, String resolutionNote) {
        PlantHealthAlert alert = alertRepository.findById(alertId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y c·∫£nh b√°o v·ªõi ID: " + alertId));

        alert.setResolved(true);
        alert.setResolvedAt(LocalDateTime.now());
        alert.setResolutionNote(resolutionNote);

        alertRepository.save(alert);
        log.info("‚úÖ ƒê√£ ƒë√°nh d·∫•u c·∫£nh b√°o {} l√† ƒë√£ x·ª≠ l√Ω", alertId);
    }

    /**
     * X√≥a c·∫£nh b√°o c≈© ƒë√£ x·ª≠ l√Ω (ch·∫°y ƒë·ªãnh k·ª≥)
     */
    @Transactional
    public void cleanupOldAlerts(int daysToKeep) {
        LocalDateTime cutoffDate = LocalDateTime.now().minusDays(daysToKeep);
        alertRepository.deleteByResolvedTrueAndResolvedAtBefore(cutoffDate);
        log.info("üßπ ƒê√£ d·ªçn d·∫πp c√°c c·∫£nh b√°o c≈© tr∆∞·ªõc ng√†y {}", cutoffDate);
    }

    private void sendEmailForNewHealthAlerts(List<PlantHealthAlert> newAlerts) {
        if (newAlerts.isEmpty())
            return;

        Long farmId = newAlerts.get(0).getFarmId();
        Farm farm = farmRepository.findById(farmId).orElse(null);

        if (farm == null || farm.getOwner() == null || farm.getOwner().getEmail() == null) {
            log.warn("Kh√¥ng th·ªÉ g·ª≠i email c·∫£nh b√°o s·ª©c kh·ªèe cho farmId {} v√¨ thi·∫øu th√¥ng tin ch·ªß s·ªü h·ªØu.", farmId);
            return;
        }
        String ownerEmail = farm.getOwner().getEmail();

        for (PlantHealthAlert alert : newAlerts) {
            if (alert.getSeverity() == Severity.LOW) {
                log.info("B·ªè qua g·ª≠i email cho c·∫£nh b√°o s·ª©c kh·ªèe m·ª©c ƒë·ªô th·∫•p: {}", alert.getAlertType());
                continue;
            }

            String subject = String.format("[SmartFarm C·∫£nh B√°o - %s] %s t·∫°i %s",
                    alert.getSeverity().getDisplayName().toUpperCase(),
                    alert.getAlertType().getDisplayName(),
                    farm.getName());

            String text = String.format(
                    "Xin ch√†o,\n\n" +
                            "H·ªá th·ªëng SmartFarm v·ª´a ph√°t hi·ªán m·ªôt c·∫£nh b√°o s·ª©c kh·ªèe c√¢y tr·ªìng b·∫•t th∆∞·ªùng t·∫°i n√¥ng tr·∫°i '%s'.\n\n"
                            +
                            "--- CHI TI·∫æT C·∫¢NH B√ÅO ---\n" +
                            "Lo·∫°i c·∫£nh b√°o: %s\n" + "M·ª©c ƒë·ªô: %s\n" + "M√¥ t·∫£: %s\n" + "G·ª£i √Ω x·ª≠ l√Ω: %s\n"
                            + "Th·ªùi ƒëi·ªÉm: %s\n\n" +
                            "Vui l√≤ng ƒëƒÉng nh·∫≠p v√†o h·ªá th·ªëng ƒë·ªÉ xem chi ti·∫øt.\n\n" +
                            "Tr√¢n tr·ªçng,\n" + "ƒê·ªôi ng≈© SmartFarm.",
                    farm.getName(), alert.getAlertType().getDisplayName(), alert.getSeverity().getDisplayName(),
                    alert.getDescription(), alert.getSuggestion(), alert.getDetectedAt().toString());

            emailService.sendSimpleMessage(ownerEmail, subject, text);
            log.info("ƒê√£ g·ª≠i email c·∫£nh b√°o s·ª©c kh·ªèe ({}) t·ªõi {}", alert.getAlertType(), ownerEmail);
        }
    }

}